{
  "name": "mohair",
  "version": "0.11.0",
  "description": "mohair is a simple and flexible sql builder with a fluent interface",
  "keywords": [
    "sql",
    "builder",
    "fluid"
  ],
  "homepage": "http://github.com/snd/mohair",
  "author": {
    "name": "Maximilian KrÃ¼ger",
    "email": "kruemaxi@gmail.com",
    "url": "http://github.com/snd"
  },
  "bugs": {
    "url": "http://github.com/snd/mohair/issues",
    "email": "kruemaxi@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/snd/mohair.git"
  },
  "licenses": {
    "type": "MIT",
    "url": "git://github.com/snd/mohair/LICENSE"
  },
  "engines": {
    "node": ">=0.8.5"
  },
  "dependencies": {
    "criterion": "0.3.2"
  },
  "devDependencies": {
    "coffee-script": "1.6.3",
    "nodeunit": "0.8"
  },
  "main": "src/mohair",
  "scripts": {
    "prepublish": "coffee --bare --compile --output src src/*.coffee",
    "postpublish": "rm src/*.js",
    "pretest": "coffee --bare --compile --output src src/*.coffee && coffee --bare --compile --output test test/*.coffee",
    "posttest": "rm src/*.js && rm test/*.js",
    "test": "nodeunit test/*.js"
  },
  "readme": "# mohair\n\n[![Build Status](https://travis-ci.org/snd/mohair.png)](https://travis-ci.org/snd/mohair)\n\nmohair is a simple and flexible sql builder with a fluent interface.\n\n[mesa](https://github.com/snd/mohair) builds on top of mohair and adds\nmethods to execute queries, to declare and include associations (`hasOne`, `belongsTo`, `hasMany`, `hasAndBelongsToMany`) and more:\n[go check it out.](https://github.com/snd/mesa)\n\n### install\n\n```\nnpm install mohair\n```\n\n### use\n\nmohair has a fluent interface where every method returns a new object.\nno method ever changes the state of the object it is called on.\nthis enables a functional programming style:\n\n```javascript\nvar visibleUsers = mohair.table('user').where({is_visible: true});\n\nvar updateUser = visibleUsers.update({name: 'bob'}).where({id: 3});\nupdateUser.sql();       // => 'UPDATE user SET name = ? WHERE (is_visible = ?) AND (id = ?)'\nupdateUser.params();    // => ['bob', true, 3]\n\nvar deleteUser = visibleUsers.where({name: 'alice'}).delete();\ndeleteUser.sql();       // => 'DELETE FROM user WHERE (is_visible = ?) AND (name = ?)'\ndeleteUser.params();    // => [true, 'alice']\n```\n\n##### require\n\n```javascript\nvar mohair = require('mohair');\n```\n\n##### specify the table to use\n\n```javascript\nvar userTable = mohair.table('user');\n```\n\n##### insert a record\n\n```javascript\nvar query = userTable.insert({name: 'alice', email: 'alice@example.com'});\n\nquery.sql();        // => 'INSERT INTO user(name, email) VALUES (?, ?)'\nquery.params();     // => ['alice', 'alice@example.com']\n```\n\n##### insert with some raw sql\n\n```javascript\nvar query = userTable.insert({name: 'alice', created_at: mohair.raw('NOW()')});\n\nquery.sql();        // => 'INSERT INTO user(name, created_at) VALUES (?, NOW())'\nquery.params();     // => ['alice']\n```\n\n##### insert multiple records\n\n```javascript\nvar query = userTable.insertMany([{name: 'alice'}, {name: 'bob'}]);\n\nquery.sql();        // => 'INSERT INTO user(name) VALUES (?), (?)'\nquery.params();     // => ['alice', 'bob']\n```\n\nall records in the argument array must have the same properties.\n\n##### delete\n\n```javascript\nvar query = userTable.where({id: 3}).delete();\n\nquery.sql();        // => 'DELETE FROM user WHERE id = ?'\nquery.params();     // => [3]\n```\n\n`where` can take any valid [criterion](https://github.com/snd/criterion).\n\n##### update\n\n```javascript\nvar query = userTable.where({name: 'alice'}).update({name: 'bob'});\n\nquery.sql();        // => 'UPDATE user SET name = ? WHERE name = ?'\nquery.params();     // => ['bob', 'alice']\n```\n\n##### update with some raw sql\n\n```javascript\nvar query = userTable.where({name: 'alice'}).update({age: mohair.raw('LOG(age, ?)', 4)});\n\nquery.sql();        // => 'UPDATE user SET age = LOG(age, ?) WHERE name = ?'\nquery.params();     // => [4, 'alice']\n```\n\n`where` can take any valid [criterion](https://github.com/snd/criterion).\n\n##### select\n\n```javascript\nvar query = userTable.select();\n\nquery.sql();        // => 'SELECT * FROM user'\nquery.params();     // => []\n```\n\nyou can omit `select()` if you want to select `*`. select is the default action.\n\n```javascript\nvar query = userTable.select('name, timestamp AS created_at');\n\nquery.sql();        // => 'SELECT name, timestamp AS created_at FROM user'\nquery.params();     // => []\n```\n\n```javascript\nvar query = userTable.select('name', 'timestamp AS created_at');\n\nquery.sql();        // => 'SELECT name, timestamp AS created_at FROM user'\nquery.params();     // => []\n```\n\n```javascript\nvar query = userTable.select('name', {created_at: 'timestamp'});\n\nquery.sql();        // => 'SELECT name, timestamp AS created_at FROM user'\nquery.params();     // => []\n```\n\n```javascript\nvar fragment = mohair.raw('SUM(total_sales/?)', 10);\nvar query = mohair\n    .table('regional_sales')\n    .select('region', {summed_sales: fragment});\n\nquery.sql();        // => 'SELECT region, (SUM(total_sales/?)) AS summed_sales FROM regional_sales'\nquery.params();     // => [10]\n```\n\n##### select with subquery\n\n```javascript\nvar subquery = mohair\n    .table('order')\n    .where('user_id = user.id')\n    .select('count(1)');\nvar query = userTable.select('name', {order_count: subquery});\n\nquery.sql();        // => 'SELECT name, (SELECT count(1) FROM order WHERE user_id = user.id) AS order_count FROM user'\nquery.params();     // => []\n```\n\n##### select without a table\n\n```javascript\nvar query = mohair.select('now()')\n\nquery.sql();        // => 'SELECT now()'\nquery.params();     // => []\n```\n\n##### select with criteria\n\n```javascript\nvar query = userTable.where({id: 3}).where('name = ?', 'alice').select();\n\nquery.sql();        // => 'SELECT * FROM user WHERE (id = ?) AND (name = ?)'\nquery.params();     // => [3, 'alice']\n```\n\n`where` can take any valid [criterion](https://github.com/snd/criterion).\nmultiple calls to `where` are anded together.\n\n##### order\n\n```javascript\nvar query = userTable.order('created DESC, name ASC').select();\n\nquery.sql();        // => 'SELECT * FROM user ORDER BY created DESC, name ASC'\nquery.params();     // => []\n```\n\n##### limit and offset\n\n```javascript\nvar query = userTable.limit(20).offset(10).select();\n\nquery.sql();        // => 'SELECT * FROM user LIMIT ? OFFSET ?'\nquery.params();     // => [20, 10]\n```\n\n##### join\n\n```javascript\nvar query = userTable.join('JOIN project ON user.id = project.user_id');\n\nquery.sql();        // => 'SELECT * FROM user JOIN project ON user.id = project.user_id'\nquery.params();     // => []\n```\n\n##### join with criteria\n\n```javascript\nvar query = userTable.join('JOIN project ON user.id = project.user_id', {'project.column': {$null: true}});\n\nquery.sql();        // => 'SELECT * FROM user JOIN project ON user.id = project.user_id AND (project.column IS NULL)'\nquery.params();     // => []\n```\n\n##### group\n\n```javascript\nvar query = userTable\n    .select('user.*, count(project.id) AS project_count')\n    .join('JOIN project ON user.id = project.user_id')\n    .group('user.id');\n\nquery.sql();        // => 'SELECT user.*, count(project.id) AS project_count FROM user JOIN project ON user.id = project.user_id GROUP BY user.id'\nquery.params();     // => []\n```\n\n##### common table expressions\n\n[see the postgres documentation](http://www.postgresql.org/docs/9.2/static/queries-with.html)\n\n```javascript\nvar regionalSales = mohair\n    .select('region, SUM(amount) AS total_sales')\n    .table('orders')\n    .group('region');\n\nvar topRegions = mohair\n    .select('region')\n    .table('regional_sales')\n    .where('total_sales > (SELECT SUM(total_sales/10 FROM regional_sales))');\n\nvar query = mohair\n    .with(\n        regional_sales: regionalSales\n        top_regions: topRegions\n    )\n    .select(\"\"\"\n        region,\n        product,\n        SUM(quantity) AS product_units,\n        SUM(amount) AS product_sales\n    \"\"\")\n    .table('orders')\n    .where('region IN (SELECT region FROM top_regions)')\n    .group('region, product');\n```\n\n```javascript\nquery.sql();\n```\n\nreturns\n\n```sql\nWITH\nregional_sales AS (\n    SELECT region, SUM(amount) AS total_sales\n    FROM orders\n    GROUP BY region\n ), top_regions AS (\n    SELECT region\n    FROM regional_sales\n    WHERE total_sales > (SELECT SUM(total_sales)/10 FROM regional_sales)\n )\nSELECT\n    region,\n    product,\n    SUM(quantity) AS product_units,\n    SUM(amount) AS product_sales\nFROM orders\nWHERE region IN (SELECT region FROM top_regions)\nGROUP BY region, product;\n```\n\n### license: MIT\n",
  "readmeFilename": "README.md",
  "_id": "mohair@0.11.0",
  "dist": {
    "shasum": "e0bea32af78fcdc47dd9a1b2a56364f1963d8fd4"
  },
  "_from": "mohair@*",
  "_resolved": "https://registry.npmjs.org/mohair/-/mohair-0.11.0.tgz"
}
