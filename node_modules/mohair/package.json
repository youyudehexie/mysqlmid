{
  "name": "mohair",
  "version": "0.9.4",
  "description": "mohair is an sql builder",
  "homepage": "http://github.com/snd/mohair",
  "author": {
    "name": "Maximilian KrÃ¼ger",
    "email": "kruemaxi@gmail.com",
    "url": "http://github.com/snd"
  },
  "bugs": {
    "url": "http://github.com/snd/mohair/issues",
    "email": "kruemaxi@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/snd/mohair.git"
  },
  "licenses": {
    "type": "MIT",
    "url": "git://github.com/snd/mohair/LICENSE"
  },
  "engines": {
    "node": ">=0.8.5"
  },
  "dependencies": {
    "coffee-script": "1.4.0",
    "criterion": "0.2.1"
  },
  "devDependencies": {
    "nodeunit": "0.7.4"
  },
  "readme": "# mohair\r\n\r\n[![Build Status](https://travis-ci.org/snd/mohair.png)](https://travis-ci.org/snd/mohair)\r\n\r\nmohair is an sql builder for nodejs\r\n\r\n### install\r\n\r\n    npm install mohair\r\n\r\n### use\r\n\r\n##### use a table\r\n\r\n```coffeescript\r\nmohair = require 'mohair'\r\n\r\nuser = mohair.table 'user'  # will be used in all the following examples\r\n```\r\n\r\n##### insert a record\r\n\r\n```coffeescript\r\nquery = user.insert {name: 'foo', email: 'foo@example.com'}\r\n\r\nquery.sql()     # 'INSERT INTO user(name, email) VALUES (?, ?)'\r\nquery.params()  # ['foo', 'foo@example.com']\r\n```\r\n\r\n##### insert multiple records\r\n\r\n```coffeescript\r\nquery = user.insert [{name: 'foo'}, {name: 'bar'}]\r\n\r\nquery.sql()     # 'INSERT INTO user(name) VALUES (?), (?)'\r\nquery.params()  # ['foo', 'bar']\r\n```\r\n\r\nall records in the argument array must have the same properties.\r\n\r\n##### delete\r\n\r\n```coffeescript\r\nuser.where(id: 3).delete()\r\n\r\nquery.sql()     # 'DELETE FROM user WHERE id = ?'\r\nquery.params()  # [3]\r\n```\r\n\r\n`where` can take any valid [criterion](https://github.com/snd/criterion).\r\n\r\n##### update\r\n\r\n```coffeescript\r\nquery = user.where({name: 'foo'}).update({name: 'bar'})\r\n\r\nquery.sql()     # 'UPDATE user SET name = ? WHERE name = ?'\r\nquery.params()  # ['bar', 'foo']\r\n```\r\n\r\n##### select\r\n\r\n```coffeescript\r\nquery = user.select()\r\n\r\nquery.sql()     # 'SELECT * FROM user'\r\nquery.params()  # []\r\n```\r\n\r\nyou can omit `select()` if you want to select `*`. select is the default action.\r\n\r\n##### select specific fields\r\n\r\n```coffeescript\r\nquery = user.select('name, timestamp AS created_at')\r\n\r\nquery.sql()     # 'SELECT name, timestamp AS created_at FROM user'\r\nquery.params()  # []\r\n```\r\n\r\n##### select with criteria\r\n\r\n```coffeescript\r\nquery = user.where(id: 3).where('name = ?', 'foo').select()\r\n\r\nquery.sql()     # 'SELECT * FROM user WHERE (id = ?) AND (name = ?)'\r\nquery.params()  # [3, 'foo']\r\n```\r\n\r\nmultiple calls to `where` are anded together.\r\n\r\n`where` can take any valid [criterion](https://github.com/snd/criterion).\r\n\r\n##### order\r\n\r\n```coffeescript\r\nquery = user.order('created DESC, name ASC').select()\r\n\r\nquery.sql()     # 'SELECT * FROM user ORDER BY created DESC, name ASC'\r\nquery.params()  # []\r\n```\r\n\r\n##### limit and offset\r\n\r\n```coffeescript\r\nquery = user.limit(20).offset(10).select()\r\n\r\nquery.sql()     # 'SELECT * FROM user LIMIT ? OFFSET ?'\r\nquery.params()  # [20, 10]\r\n```\r\n\r\n##### join\r\n\r\n```coffeescript\r\nquery = user.join('JOIN project ON user.id = project.user_id')\r\n\r\nquery.sql()     # 'SELECT * FROM user JOIN project ON user.id = project.user_id'\r\nquery.params()  # []\r\n```\r\n\r\n##### join with criteria\r\n\r\n```coffeescript\r\nquery = user.join('JOIN project ON user.id = project.user_id', {'project.column': {$null: true}})\r\n\r\nquery.sql()     # 'SELECT * FROM user JOIN project ON user.id = project.user_id AND (project.column IS NULL)'\r\nquery.params()  # []\r\n```\r\n\r\n##### group\r\n\r\n```coffeescript\r\nquery = user\r\n    .select('user.*, count(project.id) AS project_count')\r\n    .join('JOIN project ON user.id = project.user_id')\r\n    .group('user.id')\r\n\r\nquery.sql()\r\n# 'SELECT user.*, count(project.id) AS project_count FROM user JOIN project ON user.id = project.user_id GROUP BY user.id'\r\nquery.params()\r\n# []\r\n```\r\n\r\n##### immutability\r\n\r\nmohair objects are immutable.\r\n\r\nevery method call returns a new object.\r\n\r\nno method call ever changes the state of the object it is called on.\r\n\r\nthis means you can do stuff like this:\r\n\r\n```coffeescript\r\nvisibleUsers = mohair.table('user').where(is_visible: true)\r\n\r\nupdateUser = visibleUsers.update({name: 'i am visible'}).where(id: 3)\r\nupdateUser.sql()       # 'UPDATE user SET name = ? WHERE (is_visible = ?) AND (id = ?)'\r\nupdateUser.params()    # ['i am visible', true, 3]\r\n\r\ndeleteUser = visibleUsers.where({name: 'foo'}).delete()\r\ndeleteUser.sql()       # 'DELETE FROM user WHERE (is_visible = ?) AND (name = ?)'\r\ndeleteUser.params()    # [true, 'foo']\r\n```\r\n\r\neverything chains!\r\n\r\n### license: MIT\r\n",
  "readmeFilename": "README.md",
  "_id": "mohair@0.9.4",
  "_from": "mohair@*"
}
